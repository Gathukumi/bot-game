{"ast":null,"code":"var _jsxFileName = \"/home/davie/Desktop/my-projects/bot-game/bot-game/src/BotCollection.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotProfile from './BotProfile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BotCollection() {\n  _s();\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n  useEffect(() => {\n    // Fetch data from your local server\n    fetch('http://localhost:3000/bots').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(data => setBots(data.bots)).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  const addToArmy = bot => {\n    if (!army.includes(bot)) {\n      setArmy([...army, bot]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All Bots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-list\",\n      children: bots && bots.length > 0 ?\n      // Check if bots is defined and not empty\n      bots.map(bot => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(BotProfile, {\n          bot: bot\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addToArmy(bot),\n          children: \"Add to Army\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, bot.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No bots available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this) // Render a message if bots is undefined or empty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(BotCollection, \"68vvBV/GRPK97Mw+lesffEpDxCY=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","useEffect","BotProfile","jsxDEV","_jsxDEV","BotCollection","_s","bots","setBots","army","setArmy","fetch","then","response","ok","Error","json","data","catch","error","console","addToArmy","bot","includes","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","onClick","id","_c","$RefreshReg$"],"sources":["/home/davie/Desktop/my-projects/bot-game/bot-game/src/BotCollection.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotProfile from './BotProfile';\n\nfunction BotCollection() {\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]);\n\n  useEffect(() => {\n    // Fetch data from your local server\n    fetch('http://localhost:3000/bots')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((data) => setBots(data.bots))\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n\n  const addToArmy = (bot) => {\n    if (!army.includes(bot)) {\n      setArmy([...army, bot]);\n    }\n  };\n\n  return (\n    <div>\n      <h2>All Bots</h2>\n      <div className=\"bot-list\">\n        {bots && bots.length > 0 ? ( // Check if bots is defined and not empty\n          bots.map((bot) => (\n            <div key={bot.id}>\n              <BotProfile bot={bot} />\n              <button onClick={() => addToArmy(bot)}>Add to Army</button>\n            </div>\n          ))\n        ) : (\n          <p>No bots available.</p> // Render a message if bots is undefined or empty\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACAU,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAKT,OAAO,CAACS,IAAI,CAACV,IAAI,CAAC,CAAC,CAClCW,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,SAAS,GAAIC,GAAG,IAAK;IACzB,IAAI,CAACb,IAAI,CAACc,QAAQ,CAACD,GAAG,CAAC,EAAE;MACvBZ,OAAO,CAAC,CAAC,GAAGD,IAAI,EAAEa,GAAG,CAAC,CAAC;IACzB;EACF,CAAC;EAED,oBACElB,OAAA;IAAAoB,QAAA,gBACEpB,OAAA;MAAAoB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBxB,OAAA;MAAKyB,SAAS,EAAC,UAAU;MAAAL,QAAA,EACtBjB,IAAI,IAAIA,IAAI,CAACuB,MAAM,GAAG,CAAC;MAAK;MAC3BvB,IAAI,CAACwB,GAAG,CAAET,GAAG,iBACXlB,OAAA;QAAAoB,QAAA,gBACEpB,OAAA,CAACF,UAAU;UAACoB,GAAG,EAAEA;QAAI;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACxBxB,OAAA;UAAQ4B,OAAO,EAAEA,CAAA,KAAMX,SAAS,CAACC,GAAG,CAAE;UAAAE,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAFnDN,GAAG,CAACW,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACN,CAAC,gBAEFxB,OAAA;QAAAoB,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;IAC3B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtB,EAAA,CA1CQD,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AA4CtB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}